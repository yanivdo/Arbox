{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\client\\\\src\\\\components\\\\Floors.js\";\nimport React from \"react\";\nimport Elevators from \"./Elevators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Floors extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callElevator = floor => {\n      fetch(\"http://localhost/Building/elevatorCallApi\", {\n        method: \"POST\",\n        withCredentials: true,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          floor: floor\n        })\n      }).then(response => response.json()).then(result => {\n        let arrayCopy = this.state.elevatorsPlaces.slice();\n        arrayCopy[result.elevator] = result.distance;\n        let arrayCopyStatus = this.state.floorStatus.slice();\n        arrayCopyStatus[floor] = \"waiting\";\n        this.setState({\n          floorStatus: arrayCopyStatus\n        });\n        this.moveElevetorBySpeed();\n        console.log(this.state.elevatorsPlaces[result.elevator]);\n        this.setState({\n          elevatorsPlaces: arrayCopy\n        });\n      });\n    };\n\n    this.moveElevetorBySpeed = () => {};\n\n    this.componentDidMount = () => {\n      this.checkElevatorPlace();\n    };\n\n    this.checkElevatorPlace = () => {\n      fetch(\"http://localhost/Building/elevatorsPlaces\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({})\n      }).then(response => response.json()).then(result => {\n        var copyArray = [];\n\n        for (let i = 0; i < this.state.floors; i++) {\n          copyArray[i] = \"Call\";\n        }\n\n        this.setState({\n          floorStatus: copyArray,\n          elevatorsPlaces: result,\n          page: 1\n        });\n      });\n    };\n\n    this.state = {\n      page: 0,\n      floors: 10,\n      floorStatus: [],\n      speed: 1,\n      elevatorsPlaces: []\n    };\n  }\n\n  render() {\n    if (!this.state.page) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 20\n      }, this);\n    }\n\n    var floorDetails = [];\n\n    for (var i = this.state.floors - 1; i >= 0; i--) {\n      let floor = i;\n      floorDetails.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `floorSection floorBlock_${i}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"floorNum\",\n          children: floor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Elevators, {\n          floor: i,\n          elevatorsPlace: this.state.elevatorsPlaces\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"elevatorCall\",\n          name: \"elevatorCall\",\n          onClick: () => this.callElevator(floor),\n          children: this.state.floorStatus[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"floorsWrapper\",\n      children: floorDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Floors;","map":{"version":3,"sources":["D:/xampp/htdocs/client/src/components/Floors.js"],"names":["React","Elevators","Floors","Component","constructor","props","callElevator","floor","fetch","method","withCredentials","headers","Accept","credentials","body","JSON","stringify","then","response","json","result","arrayCopy","state","elevatorsPlaces","slice","elevator","distance","arrayCopyStatus","floorStatus","setState","moveElevetorBySpeed","console","log","componentDidMount","checkElevatorPlace","copyArray","i","floors","page","speed","render","floorDetails","push"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Elevators from \"./Elevators\";\r\nclass Floors extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            floors: 10,\r\n            floorStatus: [],\r\n            speed: 1,\r\n            elevatorsPlaces: []\r\n        };\r\n    }\r\n\r\n    callElevator = (floor) => {\r\n        fetch(\"http://localhost/Building/elevatorCallApi\", {\r\n            method: \"POST\",\r\n            withCredentials: true,\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            credentials: \"include\",\r\n            body: JSON.stringify({\r\n                floor:floor\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                let arrayCopy = this.state.elevatorsPlaces.slice();\r\n                arrayCopy[result.elevator] = result.distance;\r\n                let arrayCopyStatus = this.state.floorStatus.slice();\r\n                arrayCopyStatus[floor] = \"waiting\";\r\n                this.setState({\r\n                    floorStatus:arrayCopyStatus\r\n                });\r\n\r\n                this.moveElevetorBySpeed();\r\n                console.log(this.state.elevatorsPlaces[result.elevator]);\r\n\r\n                this.setState({\r\n                    elevatorsPlaces:arrayCopy,\r\n                    \r\n                    });\r\n            });\r\n    }\r\n\r\n    moveElevetorBySpeed = () => {\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.checkElevatorPlace();\r\n    };\r\n\r\n    checkElevatorPlace = () => {\r\n        fetch(\"http://localhost/Building/elevatorsPlaces\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                var copyArray = [];\r\n                for(let i = 0; i < this.state.floors; i++){\r\n                    copyArray[i] = \"Call\";\r\n                }\r\n                this.setState({\r\n                    floorStatus:copyArray,\r\n                    elevatorsPlaces: result,\r\n                    page:1\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.page) {\r\n            return <div className=\"Loading\"></div>;\r\n        }\r\n        var floorDetails = [];\r\n        for (var i = this.state.floors - 1; i >= 0; i--) {\r\n            let floor = i;\r\n            floorDetails.push(\r\n                <div className={`floorSection floorBlock_${i}`}>\r\n                    <div className=\"floorNum\">{floor}</div>\r\n                    <Elevators floor={i} elevatorsPlace={this.state.elevatorsPlaces} />\r\n                    <div className=\"elevatorCall\" name=\"elevatorCall\" onClick={() => this.callElevator(floor)}>{this.state.floorStatus[i]}</div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"floorsWrapper\">\r\n                {floorDetails}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Floors;"]},"metadata":{},"sourceType":"module"}