{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\client\\\\src\\\\components\\\\Floors.js\";\nimport React from \"react\";\nimport Elevators from \"./Elevators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Floors extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callElevator = (e, floor) => {\n      fetch(\"http://localhost/Building/elevatorCallApi\", {\n        method: \"POST\",\n        withCredentials: true,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          floor: floor\n        })\n      }).then(response => response.json()).then(result => {\n        let arrayCopyStatus = this.state.floorStatus.slice();\n        arrayCopyStatus[floor] = \"waiting\";\n        this.updateElevatorQueue(result.elevator, floor);\n        this.setState({\n          floorStatus: arrayCopyStatus\n        }); //this.startElevatorMove(result, floor);\n\n        setTimeout(() => {\n          this.updateElevatorStatus(result.elevator);\n          arrayCopyStatus[floor] = \"arrived\";\n          this.setState({\n            floorStatus: arrayCopyStatus\n          });\n          arrayCopyStatus[floor] = \"Call\";\n          setTimeout(() => {\n            this.setState({\n              floorStatus: arrayCopyStatus\n            });\n          }, 2000);\n        }, (result.distance + 1) * 1000);\n      });\n    };\n\n    this.updateElevatorQueue = (elevator, floor, fromChange = this.state.elevatorsPlaces[elevator], reset = 0) => {\n      let elevatorArray = this.state.elevatorMoving.elevator.slice();\n      let fromArray = this.state.elevatorMoving.from.slice();\n      let toArray = this.state.elevatorMoving.to.slice(); //console.log(\"here4\");\n\n      if (reset) {\n        elevatorArray.splice(elevator, 1);\n        fromArray.splice(elevator, 1);\n        toArray.splice(elevator, 1);\n      } else {\n        elevatorArray[elevator] = elevator;\n        fromArray[elevator] = fromChange;\n        toArray[elevator] = floor;\n      }\n\n      let elevatorMovingObj = {\n        elevator: elevatorArray,\n        from: fromArray,\n        to: toArray\n      };\n      this.setState({\n        elevatorMoving: elevatorMovingObj\n      });\n    };\n\n    this.startElevatorMove = () => {\n      for (let i = 0; i < this.state.elevatorMoving.elevator.length; i++) {\n        var elevator = this.state.elevatorMoving.elevator[i];\n        var start = this.state.elevatorMoving.from[i];\n        var end = this.state.elevatorMoving.to[i]; //console.log(\"here3\");\n\n        if (start === end) {\n          //console.log(\"here7\");\n          this.updateElevatorQueue(elevator, end, start, 1);\n        } else {\n          if (start < end) {\n            this.moveElevatorUp(elevator, start, end);\n          } else if (start > end) {\n            this.moveElevatorDown(elevator, start, end);\n          }\n        } //console.log(this.state.elevatorMoving);\n\n      } // if (start < end) {\n      //     this.moveElevatorUp(elevator, start, end);\n      // } else {\n      //     this.moveElevatorDown(elevator, start, end);\n      // }\n\n    };\n\n    this.moveElevatorUp = (elevator, start, end) => {\n      let arrayCopy = this.state.elevatorsPlaces.slice();\n      let nextFloor = start + 1;\n      arrayCopy[elevator] = nextFloor;\n      this.moveElevatorBySpeed(arrayCopy);\n      this.updateElevatorQueue(elevator, end, nextFloor); //console.log(\"here6\");\n      //console.log(count);\n      //console.log(elevator + \":\" + end + \":\" + nextFloor);\n    };\n\n    this.moveElevatorDown = (elevator, start, end) => {\n      let arrayCopy = this.state.elevatorsPlaces.slice();\n      let nextFloor = start - 1;\n      arrayCopy[elevator] = nextFloor;\n      this.moveElevatorBySpeed(arrayCopy);\n      this.updateElevatorQueue(elevator, end, nextFloor); //console.log(\"here6\");\n      //console.log(count);\n      //console.log(elevator + \":\" + end + \":\" + nextFloor);\n    };\n\n    this.moveElevatorBySpeed = arrayCopy => {\n      this.setState({\n        elevatorsPlaces: arrayCopy\n      });\n    };\n\n    this.updateElevatorStatus = elevator => {\n      fetch(\"http://localhost/Building/updateElevatorStatus\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          elevatorNum: elevator\n        })\n      }).then(response => response.json()).then(result => {});\n    };\n\n    this.componentWillUnmount = () => {\n      clearInterval(this.state.intervalId);\n    };\n\n    this.componentDidMount = () => {\n      var intervalId = setInterval(() => {\n        if (this.state.elevatorMoving.elevator.length > 0) {\n          //console.log(\"here2\");\n          this.startElevatorMove();\n        }\n      }, 1000);\n      this.setState({\n        intervalId: intervalId\n      });\n      this.checkElevatorPlace();\n      var copyArray = [];\n\n      for (let i = 0; i < this.state.floors; i++) {\n        copyArray[i] = \"Call\";\n      }\n\n      this.setState({\n        floorStatus: copyArray\n      });\n    };\n\n    this.checkElevatorPlace = () => {\n      fetch(\"http://localhost/Building/elevatorsPlaces\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({})\n      }).then(response => response.json()).then(result => {\n        this.setState({\n          elevatorsPlaces: result,\n          page: 1\n        });\n      });\n    };\n\n    this.state = {\n      page: 0,\n      floors: 10,\n      intervalId: 0,\n      floorStatus: [],\n      elevatorsPlaces: [],\n      movment: 0,\n      elevatorMoving: {\n        elevator: [],\n        from: [],\n        to: []\n      }\n    };\n  }\n\n  render() {\n    if (!this.state.page) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 20\n      }, this);\n    }\n\n    var floorDetails = [];\n\n    for (var i = this.state.floors - 1; i >= 0; i--) {\n      var elevatorCall = \"free\";\n\n      if (this.state.floorStatus[i] === \"waiting\" || this.state.floorStatus[i] === \"arrived\") {\n        elevatorCall = \"Occupied\";\n      }\n\n      let floor = i;\n      floorDetails.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `floorSection floorBlock_${i}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"floorNum\",\n          children: floor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Elevators, {\n          floor: i,\n          elevatorsPlace: this.state.elevatorsPlaces\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `elevatorCall ${elevatorCall}`,\n          name: \"elevatorCall\",\n          onClick: e => this.callElevator(e, floor),\n          children: this.state.floorStatus[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"floorsWrapper\",\n      children: floorDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Floors;","map":{"version":3,"sources":["D:/xampp/htdocs/client/src/components/Floors.js"],"names":["React","Elevators","Floors","Component","constructor","props","callElevator","e","floor","fetch","method","withCredentials","headers","Accept","credentials","body","JSON","stringify","then","response","json","result","arrayCopyStatus","state","floorStatus","slice","updateElevatorQueue","elevator","setState","setTimeout","updateElevatorStatus","distance","fromChange","elevatorsPlaces","reset","elevatorArray","elevatorMoving","fromArray","from","toArray","to","splice","elevatorMovingObj","startElevatorMove","i","length","start","end","moveElevatorUp","moveElevatorDown","arrayCopy","nextFloor","moveElevatorBySpeed","elevatorNum","componentWillUnmount","clearInterval","intervalId","componentDidMount","setInterval","checkElevatorPlace","copyArray","floors","page","movment","render","floorDetails","elevatorCall","push"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Elevators from \"./Elevators\";\r\nclass Floors extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            floors: 10,\r\n            intervalId:0,\r\n            floorStatus: [],\r\n            elevatorsPlaces: [],\r\n            movment: 0,\r\n            elevatorMoving: {\r\n                elevator: [],\r\n                from: [],\r\n                to: []\r\n            }\r\n        };\r\n    }\r\n\r\n    callElevator = (e, floor) => {\r\n        fetch(\"http://localhost/Building/elevatorCallApi\", {\r\n            method: \"POST\",\r\n            withCredentials: true,\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            credentials: \"include\",\r\n            body: JSON.stringify({\r\n                floor: floor\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                let arrayCopyStatus = this.state.floorStatus.slice();\r\n                arrayCopyStatus[floor] = \"waiting\";\r\n                this.updateElevatorQueue(result.elevator, floor);\r\n                this.setState({\r\n                    floorStatus: arrayCopyStatus,\r\n                });\r\n                //this.startElevatorMove(result, floor);\r\n\r\n                setTimeout(\r\n                    () => {\r\n                        this.updateElevatorStatus(result.elevator);\r\n                        arrayCopyStatus[floor] = \"arrived\";\r\n                        this.setState({\r\n                            floorStatus: arrayCopyStatus\r\n                        });\r\n                        arrayCopyStatus[floor] = \"Call\";\r\n                        setTimeout(\r\n                            () => {\r\n                                this.setState({\r\n                                    floorStatus: arrayCopyStatus\r\n                                });\r\n                            }, 2000);\r\n                    }, (result.distance + 1) * 1000);\r\n            });\r\n    }\r\n\r\n    updateElevatorQueue = (elevator, floor, fromChange = this.state.elevatorsPlaces[elevator], reset = 0) => {\r\n        let elevatorArray = this.state.elevatorMoving.elevator.slice();\r\n        let fromArray = this.state.elevatorMoving.from.slice();\r\n        let toArray = this.state.elevatorMoving.to.slice();\r\n        //console.log(\"here4\");\r\n        if (reset) {\r\n            elevatorArray.splice(elevator, 1);\r\n            fromArray.splice(elevator, 1);\r\n            toArray.splice(elevator, 1);\r\n        } else {\r\n            elevatorArray[elevator] = elevator;\r\n            fromArray[elevator] = fromChange;\r\n            toArray[elevator] = floor;\r\n        }\r\n        let elevatorMovingObj = {\r\n            elevator: elevatorArray,\r\n            from: fromArray,\r\n            to: toArray\r\n        }\r\n        this.setState({\r\n            elevatorMoving: elevatorMovingObj\r\n        });\r\n    }\r\n\r\n    startElevatorMove = () => {\r\n        for (let i = 0; i < this.state.elevatorMoving.elevator.length; i++) {\r\n            var elevator = this.state.elevatorMoving.elevator[i];\r\n            var start = this.state.elevatorMoving.from[i];\r\n            var end = this.state.elevatorMoving.to[i];\r\n            //console.log(\"here3\");\r\n            if (start === end) {\r\n                //console.log(\"here7\");\r\n                this.updateElevatorQueue(elevator, end, start, 1);\r\n            } else {\r\n                if(start < end){\r\n                    this.moveElevatorUp(elevator, start, end);\r\n                }else if (start > end){\r\n                    this.moveElevatorDown(elevator, start, end);\r\n                }\r\n            }\r\n            //console.log(this.state.elevatorMoving);\r\n        }\r\n\r\n\r\n        // if (start < end) {\r\n        //     this.moveElevatorUp(elevator, start, end);\r\n        // } else {\r\n        //     this.moveElevatorDown(elevator, start, end);\r\n        // }\r\n    }\r\n\r\n    moveElevatorUp = (elevator, start, end) => {\r\n        let arrayCopy = this.state.elevatorsPlaces.slice();\r\n        let nextFloor = start + 1;\r\n        arrayCopy[elevator] = nextFloor;\r\n        this.moveElevatorBySpeed(arrayCopy);\r\n        this.updateElevatorQueue(elevator, end, nextFloor);\r\n        //console.log(\"here6\");\r\n        //console.log(count);\r\n        //console.log(elevator + \":\" + end + \":\" + nextFloor);\r\n    }\r\n\r\n    moveElevatorDown = (elevator, start, end) => {\r\n        let arrayCopy = this.state.elevatorsPlaces.slice();\r\n        let nextFloor = start - 1;\r\n        arrayCopy[elevator] = nextFloor;\r\n        this.moveElevatorBySpeed(arrayCopy);\r\n        this.updateElevatorQueue(elevator, end, nextFloor);\r\n        //console.log(\"here6\");\r\n        //console.log(count);\r\n        //console.log(elevator + \":\" + end + \":\" + nextFloor);\r\n    }\r\n\r\n    moveElevatorBySpeed = (arrayCopy) => {\r\n        this.setState({\r\n            elevatorsPlaces: arrayCopy,\r\n        });\r\n    }\r\n\r\n    updateElevatorStatus = (elevator) => {\r\n\r\n        fetch(\"http://localhost/Building/updateElevatorStatus\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                elevatorNum: elevator\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n            });\r\n    }\r\n    componentWillUnmount = () => {\r\n        clearInterval(this.state.intervalId);\r\n    }\r\n    componentDidMount = () => {\r\n        var intervalId = setInterval(() => {\r\n            if (this.state.elevatorMoving.elevator.length > 0) {\r\n                //console.log(\"here2\");\r\n                this.startElevatorMove();\r\n            }\r\n        }, 1000);\r\n        this.setState({intervalId: intervalId});\r\n        this.checkElevatorPlace();\r\n        var copyArray = [];\r\n        for (let i = 0; i < this.state.floors; i++) {\r\n            copyArray[i] = \"Call\";\r\n        }\r\n        this.setState({\r\n            floorStatus: copyArray,\r\n        });\r\n    };\r\n\r\n    checkElevatorPlace = () => {\r\n        fetch(\"http://localhost/Building/elevatorsPlaces\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                this.setState({\r\n                    elevatorsPlaces: result,\r\n                    page: 1\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.page) {\r\n            return <div className=\"Loading\"></div>;\r\n        }\r\n        var floorDetails = [];\r\n        for (var i = this.state.floors - 1; i >= 0; i--) {\r\n            var elevatorCall = \"free\";\r\n            if (this.state.floorStatus[i] === \"waiting\" || this.state.floorStatus[i] === \"arrived\") {\r\n                elevatorCall = \"Occupied\";\r\n            }\r\n            let floor = i;\r\n            floorDetails.push(\r\n                <div className={`floorSection floorBlock_${i}`}>\r\n                    <div className=\"floorNum\">{floor}</div>\r\n                    <Elevators floor={i} elevatorsPlace={this.state.elevatorsPlaces} />\r\n                    <div className={`elevatorCall ${elevatorCall}`} name=\"elevatorCall\" onClick={(e) => this.callElevator(e, floor)}>{this.state.floorStatus[i]}</div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"floorsWrapper\">\r\n                {floorDetails}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Floors;"]},"metadata":{},"sourceType":"module"}