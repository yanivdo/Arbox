{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\client\\\\src\\\\components\\\\Floors.js\";\nimport React from \"react\";\nimport Elevators from \"./Elevators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Floors extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callElevator = floor => {\n      fetch(\"http://localhost/Building/elevatorCallApi\", {\n        method: \"POST\",\n        withCredentials: true,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          floor: floor\n        })\n      }).then(response => response.json()).then(result => {\n        let arrayCopyStatus = this.state.floorStatus.slice();\n        arrayCopyStatus[floor] = \"waiting\";\n        this.setState({\n          floorStatus: arrayCopyStatus\n        });\n        console.log(result.elevator);\n\n        for (var i = floor; i <= result.elevator; i++) {\n          let arrayCopy = this.state.elevatorsPlaces.slice();\n          arrayCopy[result.elevator] = i; // setTimeout(\n          //     () => {\n          //         this.moveElevetorBySpeed(arrayCopy);\n          //     }, 2000);\n        }\n      });\n    };\n\n    this.moveElevetorBySpeed = arrayCopy => {\n      this.setState({\n        elevatorsPlaces: arrayCopy\n      });\n    };\n\n    this.componentDidMount = () => {\n      this.checkElevatorPlace();\n    };\n\n    this.checkElevatorPlace = () => {\n      fetch(\"http://localhost/Building/elevatorsPlaces\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({})\n      }).then(response => response.json()).then(result => {\n        var copyArray = [];\n\n        for (let i = 0; i < this.state.floors; i++) {\n          copyArray[i] = \"Call\";\n        }\n\n        this.setState({\n          floorStatus: copyArray,\n          elevatorsPlaces: result,\n          page: 1\n        });\n      });\n    };\n\n    this.state = {\n      page: 0,\n      floors: 10,\n      floorStatus: [],\n      speed: 1,\n      elevatorsPlaces: []\n    };\n  }\n\n  render() {\n    if (!this.state.page) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 20\n      }, this);\n    }\n\n    var floorDetails = [];\n\n    for (var i = this.state.floors - 1; i >= 0; i--) {\n      let floor = i;\n      floorDetails.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `floorSection floorBlock_${i}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"floorNum\",\n          children: floor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Elevators, {\n          floor: i,\n          elevatorsPlace: this.state.elevatorsPlaces\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"elevatorCall\",\n          name: \"elevatorCall\",\n          onClick: () => this.callElevator(floor),\n          children: this.state.floorStatus[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"floorsWrapper\",\n      children: floorDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Floors;","map":{"version":3,"sources":["D:/xampp/htdocs/client/src/components/Floors.js"],"names":["React","Elevators","Floors","Component","constructor","props","callElevator","floor","fetch","method","withCredentials","headers","Accept","credentials","body","JSON","stringify","then","response","json","result","arrayCopyStatus","state","floorStatus","slice","setState","console","log","elevator","i","arrayCopy","elevatorsPlaces","moveElevetorBySpeed","componentDidMount","checkElevatorPlace","copyArray","floors","page","speed","render","floorDetails","push"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Elevators from \"./Elevators\";\r\nclass Floors extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            floors: 10,\r\n            floorStatus: [],\r\n            speed: 1,\r\n            elevatorsPlaces: []\r\n        };\r\n    }\r\n\r\n    callElevator = (floor) => {\r\n        fetch(\"http://localhost/Building/elevatorCallApi\", {\r\n            method: \"POST\",\r\n            withCredentials: true,\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            credentials: \"include\",\r\n            body: JSON.stringify({\r\n                floor: floor\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                let arrayCopyStatus = this.state.floorStatus.slice();\r\n                arrayCopyStatus[floor] = \"waiting\";\r\n\r\n                this.setState({\r\n                    floorStatus: arrayCopyStatus\r\n                });\r\n\r\n                console.log(result.elevator);\r\n\r\n                for (var i = floor; i <= result.elevator; i++) {\r\n                    \r\n\r\n                    let arrayCopy = this.state.elevatorsPlaces.slice();\r\n                    arrayCopy[result.elevator] = i;\r\n                    \r\n                    // setTimeout(\r\n                    //     () => {\r\n                    //         this.moveElevetorBySpeed(arrayCopy);\r\n                    //     }, 2000);\r\n                    \r\n                }\r\n            });\r\n    }\r\n\r\n    moveElevetorBySpeed = (arrayCopy) => {\r\n        this.setState({\r\n            elevatorsPlaces: arrayCopy,\r\n        });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.checkElevatorPlace();\r\n    };\r\n\r\n    checkElevatorPlace = () => {\r\n        fetch(\"http://localhost/Building/elevatorsPlaces\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                var copyArray = [];\r\n                for (let i = 0; i < this.state.floors; i++) {\r\n                    copyArray[i] = \"Call\";\r\n                }\r\n                this.setState({\r\n                    floorStatus: copyArray,\r\n                    elevatorsPlaces: result,\r\n                    page: 1\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.page) {\r\n            return <div className=\"Loading\"></div>;\r\n        }\r\n        var floorDetails = [];\r\n        for (var i = this.state.floors - 1; i >= 0; i--) {\r\n            let floor = i;\r\n            floorDetails.push(\r\n                <div className={`floorSection floorBlock_${i}`}>\r\n                    <div className=\"floorNum\">{floor}</div>\r\n                    <Elevators floor={i} elevatorsPlace={this.state.elevatorsPlaces} />\r\n                    <div className=\"elevatorCall\" name=\"elevatorCall\" onClick={() => this.callElevator(floor)}>{this.state.floorStatus[i]}</div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"floorsWrapper\">\r\n                {floorDetails}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Floors;"]},"metadata":{},"sourceType":"module"}