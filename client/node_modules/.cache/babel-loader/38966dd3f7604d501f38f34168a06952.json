{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\client\\\\src\\\\components\\\\Floors.js\";\nimport React from \"react\";\nimport Elevators from \"./Elevators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Floors extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callElevator = (e, floor) => {\n      console.log(e);\n      fetch(\"http://localhost/Building/elevatorCallApi\", {\n        method: \"POST\",\n        withCredentials: true,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          floor: floor\n        })\n      }).then(response => response.json()).then(result => {\n        let arrayCopyStatus = this.state.floorStatus.slice();\n        arrayCopyStatus[floor] = \"waiting\";\n        this.setState({\n          floorStatus: arrayCopyStatus\n        });\n        var continueMove = false;\n\n        for (var i = 0; i <= result.distance; i++) {\n          let arrayCopy = this.state.elevatorsPlaces.slice();\n          arrayCopy[result.elevator] = i;\n          setTimeout(() => {\n            this.moveElevetorBySpeed(arrayCopy);\n          }, i * 1000);\n        } // if(continueMove){\n        // arrayCopyStatus[floor] = \"arrived\";\n        // this.setState({\n        //     floorStatus: arrayCopyStatus\n        // });\n        // arrayCopyStatus[floor] = \"call\";\n        // setTimeout(\n        //     () => {\n        //         this.setState({\n        //             floorStatus: arrayCopyStatus\n        //         });\n        //     }, 2000);\n        // }\n\n      });\n    };\n\n    this.moveElevetorBySpeed = arrayCopy => {\n      this.setState({\n        elevatorsPlaces: arrayCopy\n      });\n    };\n\n    this.componentDidMount = () => {\n      this.checkElevatorPlace();\n    };\n\n    this.checkElevatorPlace = () => {\n      fetch(\"http://localhost/Building/elevatorsPlaces\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({})\n      }).then(response => response.json()).then(result => {\n        var copyArray = [];\n\n        for (let i = 0; i < this.state.floors; i++) {\n          copyArray[i] = \"Call\";\n        }\n\n        this.setState({\n          floorStatus: copyArray,\n          elevatorsPlaces: result,\n          page: 1\n        });\n      });\n    };\n\n    this.state = {\n      page: 0,\n      floors: 10,\n      elevators: [{\n        floorStatus: [],\n        elevatorsPlaces: []\n      }],\n      floorStatus: [],\n      speed: 1,\n      elevatorsPlaces: []\n    };\n  }\n\n  render() {\n    if (!this.state.page) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 20\n      }, this);\n    }\n\n    var floorDetails = [];\n\n    for (var i = this.state.floors - 1; i >= 0; i--) {\n      let floor = i;\n      floorDetails.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `floorSection floorBlock_${i}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"floorNum\",\n          children: floor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Elevators, {\n          floor: i,\n          elevatorsPlace: this.state.elevatorsPlaces\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"elevatorCall\",\n          name: \"elevatorCall\",\n          onClick: e => this.callElevator(e, floor),\n          children: this.state.floorStatus[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"floorsWrapper\",\n      children: floorDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Floors;","map":{"version":3,"sources":["D:/xampp/htdocs/client/src/components/Floors.js"],"names":["React","Elevators","Floors","Component","constructor","props","callElevator","e","floor","console","log","fetch","method","withCredentials","headers","Accept","credentials","body","JSON","stringify","then","response","json","result","arrayCopyStatus","state","floorStatus","slice","setState","continueMove","i","distance","arrayCopy","elevatorsPlaces","elevator","setTimeout","moveElevetorBySpeed","componentDidMount","checkElevatorPlace","copyArray","floors","page","elevators","speed","render","floorDetails","push"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Elevators from \"./Elevators\";\r\nclass Floors extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            floors: 10,\r\n            elevators:[{\r\n                floorStatus:[],\r\n                elevatorsPlaces:[]\r\n            }],\r\n            floorStatus: [],\r\n            speed: 1,\r\n            elevatorsPlaces: [],\r\n\r\n        };\r\n    }\r\n\r\n    callElevator = (e, floor) => {\r\n\r\n        console.log(e);\r\n        fetch(\"http://localhost/Building/elevatorCallApi\", {\r\n            method: \"POST\",\r\n            withCredentials: true,\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            credentials: \"include\",\r\n            body: JSON.stringify({\r\n                floor: floor\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                let arrayCopyStatus = this.state.floorStatus.slice();\r\n                arrayCopyStatus[floor] = \"waiting\";\r\n\r\n                this.setState({\r\n                    floorStatus: arrayCopyStatus\r\n                });\r\n                var continueMove = false;\r\n                for (var i = 0; i <= result.distance; i++) {\r\n                    let arrayCopy = this.state.elevatorsPlaces.slice();\r\n                    arrayCopy[result.elevator] = i;\r\n                    setTimeout(\r\n                        () => {\r\n                            this.moveElevetorBySpeed(arrayCopy);\r\n                        }, i * 1000);\r\n                }\r\n\r\n                // if(continueMove){\r\n                // arrayCopyStatus[floor] = \"arrived\";\r\n                // this.setState({\r\n                //     floorStatus: arrayCopyStatus\r\n                // });\r\n                // arrayCopyStatus[floor] = \"call\";\r\n                // setTimeout(\r\n                //     () => {\r\n                //         this.setState({\r\n                //             floorStatus: arrayCopyStatus\r\n                //         });\r\n                //     }, 2000);\r\n                // }\r\n            });\r\n    }\r\n\r\n    moveElevetorBySpeed = (arrayCopy) => {\r\n        this.setState({\r\n            elevatorsPlaces: arrayCopy,\r\n        });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.checkElevatorPlace();\r\n    };\r\n\r\n    checkElevatorPlace = () => {\r\n        fetch(\"http://localhost/Building/elevatorsPlaces\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                var copyArray = [];\r\n                for (let i = 0; i < this.state.floors; i++) {\r\n                    copyArray[i] = \"Call\";\r\n                }\r\n                this.setState({\r\n                    floorStatus: copyArray,\r\n                    elevatorsPlaces: result,\r\n                    page: 1\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.page) {\r\n            return <div className=\"Loading\"></div>;\r\n        }\r\n        var floorDetails = [];\r\n        for (var i = this.state.floors - 1; i >= 0; i--) {\r\n            let floor = i;\r\n            floorDetails.push(\r\n                <div className={`floorSection floorBlock_${i}`}>\r\n                    <div className=\"floorNum\">{floor}</div>\r\n                    <Elevators floor={i} elevatorsPlace={this.state.elevatorsPlaces} />\r\n                    <div className=\"elevatorCall\" name=\"elevatorCall\" onClick={(e) => this.callElevator(e, floor)}>{this.state.floorStatus[i]}</div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"floorsWrapper\">\r\n                {floorDetails}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Floors;"]},"metadata":{},"sourceType":"module"}