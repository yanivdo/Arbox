{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\client\\\\src\\\\components\\\\Floors.js\";\nimport React from \"react\";\nimport Elevators from \"./Elevators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Floors extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callElevator = (e, floor) => {\n      fetch(\"http://localhost/Building/elevatorCallApi\", {\n        method: \"POST\",\n        withCredentials: true,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          floor: floor\n        })\n      }).then(response => response.json()).then(result => {\n        let arrayCopyStatus = this.state.floorStatus.slice();\n        arrayCopyStatus[floor] = \"waiting\";\n        this.setState({\n          floorStatus: arrayCopyStatus\n        });\n        var start = this.state.elevatorsPlaces[result.elevator];\n        var end = floor;\n\n        if (start < end) {\n          this.moveElevatorUp(result, start, end);\n        } else {\n          this.moveElevatorDown(result, start, end);\n        }\n\n        this.updateElevatorStatus(result.elevator);\n        setTimeout(() => {\n          arrayCopyStatus[floor] = \"arrived\";\n          this.setState({\n            floorStatus: arrayCopyStatus\n          });\n          arrayCopyStatus[floor] = \"call\";\n          setTimeout(() => {\n            this.setState({\n              floorStatus: arrayCopyStatus\n            });\n          }, 2000);\n        }, (result.distance + 1) * 1000);\n      });\n    };\n\n    this.moveElevatorUp = (result, start, end) => {\n      for (var i = start; i <= end;) {\n        let arrayCopy = this.state.elevatorsPlaces.slice();\n        arrayCopy[result.elevator] = i;\n        setTimeout(() => {\n          this.moveElevetorBySpeed(arrayCopy);\n        }, i * 1000);\n        i++;\n      }\n    };\n\n    this.moveElevatorDown = (result, start, end) => {\n      var count = 0;\n\n      for (var i = start; i >= end;) {\n        let arrayCopy = this.state.elevatorsPlaces.slice();\n        arrayCopy[result.elevator] = i;\n        setTimeout(() => {\n          this.moveElevetorBySpeed(arrayCopy);\n        }, count * 1000);\n        count++;\n        i--;\n      }\n    };\n\n    this.moveElevetorBySpeed = arrayCopy => {\n      this.setState({\n        elevatorsPlaces: arrayCopy\n      });\n    };\n\n    this.updateElevatorStatus = elevator => {\n      fetch(\"http://localhost/Building/updateElevatorStatus\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          elevatorNum: elevator\n        })\n      }).then(response => response.json()).then(result => {\n        console.log(result);\n      });\n    };\n\n    this.componentDidMount = () => {\n      this.checkElevatorPlace();\n      var copyArray = [];\n\n      for (let i = 0; i < this.state.floors; i++) {\n        copyArray[i] = \"Call\";\n      }\n\n      this.setState({\n        floorStatus: copyArray\n      });\n    };\n\n    this.checkElevatorPlace = () => {\n      fetch(\"http://localhost/Building/elevatorsPlaces\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({})\n      }).then(response => response.json()).then(result => {\n        this.setState({\n          elevatorsPlaces: result,\n          page: 1\n        });\n      });\n    };\n\n    this.state = {\n      page: 0,\n      floors: 10,\n      floorStatus: [],\n      elevatorsPlaces: [],\n      speed: 1\n    };\n  }\n\n  render() {\n    if (!this.state.page) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 20\n      }, this);\n    }\n\n    var floorDetails = [];\n\n    for (var i = this.state.floors - 1; i >= 0; i--) {\n      var elevatorCall = \"free\";\n\n      if (this.state.floorStatus[i] === \"waiting\" || this.state.floorStatus[i] === \"arrived\") {\n        elevatorCall = \"Occupied\";\n      }\n\n      let floor = i;\n      floorDetails.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `floorSection floorBlock_${i}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"floorNum\",\n          children: floor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Elevators, {\n          floor: i,\n          elevatorsPlace: this.state.elevatorsPlaces\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `elevatorCall ${elevatorCall}`,\n          name: \"elevatorCall\",\n          onClick: e => this.callElevator(e, floor),\n          children: this.state.floorStatus[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"floorsWrapper\",\n      children: floorDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Floors;","map":{"version":3,"sources":["D:/xampp/htdocs/client/src/components/Floors.js"],"names":["React","Elevators","Floors","Component","constructor","props","callElevator","e","floor","fetch","method","withCredentials","headers","Accept","credentials","body","JSON","stringify","then","response","json","result","arrayCopyStatus","state","floorStatus","slice","setState","start","elevatorsPlaces","elevator","end","moveElevatorUp","moveElevatorDown","updateElevatorStatus","setTimeout","distance","i","arrayCopy","moveElevetorBySpeed","count","elevatorNum","console","log","componentDidMount","checkElevatorPlace","copyArray","floors","page","speed","render","floorDetails","elevatorCall","push"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Elevators from \"./Elevators\";\r\nclass Floors extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            floors: 10,\r\n            floorStatus: [],\r\n            elevatorsPlaces: [],\r\n            speed: 1,\r\n        };\r\n    }\r\n\r\n    callElevator = (e, floor) => {\r\n        fetch(\"http://localhost/Building/elevatorCallApi\", {\r\n            method: \"POST\",\r\n            withCredentials: true,\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            credentials: \"include\",\r\n            body: JSON.stringify({\r\n                floor: floor\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                let arrayCopyStatus = this.state.floorStatus.slice();\r\n                arrayCopyStatus[floor] = \"waiting\";\r\n\r\n                this.setState({\r\n                    floorStatus: arrayCopyStatus\r\n                });\r\n\r\n\r\n                var start = this.state.elevatorsPlaces[result.elevator];\r\n                var end = floor;\r\n                if (start < end) {\r\n                    this.moveElevatorUp(result, start, end);\r\n                } else {\r\n                    this.moveElevatorDown(result, start, end);\r\n                }\r\n                this.updateElevatorStatus(result.elevator);\r\n                setTimeout(\r\n                    () => {\r\n                        arrayCopyStatus[floor] = \"arrived\";\r\n                        this.setState({\r\n                            floorStatus: arrayCopyStatus\r\n                        });\r\n                        arrayCopyStatus[floor] = \"call\";\r\n                        setTimeout(\r\n                            () => {\r\n                                this.setState({\r\n                                    floorStatus: arrayCopyStatus\r\n                                });\r\n                            }, 2000);\r\n                    }, (result.distance + 1) * 1000);\r\n            });\r\n    }\r\n\r\n    moveElevatorUp = (result, start, end) => {\r\n        for (var i = start; i <= end;) {\r\n            let arrayCopy = this.state.elevatorsPlaces.slice();\r\n            arrayCopy[result.elevator] = i;\r\n            setTimeout(\r\n                () => {\r\n                    this.moveElevetorBySpeed(arrayCopy);\r\n                }, i * 1000);\r\n            i++;\r\n        }\r\n    }\r\n    moveElevatorDown = (result, start, end) => {\r\n        var count = 0;\r\n        for (var i = start; i >= end;) {\r\n            let arrayCopy = this.state.elevatorsPlaces.slice();\r\n            arrayCopy[result.elevator] = i;\r\n            setTimeout(\r\n                () => {\r\n                    this.moveElevetorBySpeed(arrayCopy);\r\n                }, count * 1000);\r\n            count++;\r\n            i--;\r\n        }\r\n    }\r\n\r\n    moveElevetorBySpeed = (arrayCopy) => {\r\n        this.setState({\r\n            elevatorsPlaces: arrayCopy,\r\n        });\r\n    }\r\n\r\n    updateElevatorStatus = (elevator) => {\r\n        fetch(\"http://localhost/Building/updateElevatorStatus\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                elevatorNum:elevator\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                console.log(result);\r\n            });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.checkElevatorPlace();\r\n        var copyArray = [];\r\n        for (let i = 0; i < this.state.floors; i++) {\r\n            copyArray[i] = \"Call\";\r\n        }\r\n        this.setState({\r\n            floorStatus: copyArray,\r\n        });\r\n    };\r\n\r\n    checkElevatorPlace = () => {\r\n        fetch(\"http://localhost/Building/elevatorsPlaces\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                this.setState({\r\n                    elevatorsPlaces: result,\r\n                    page: 1\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.page) {\r\n            return <div className=\"Loading\"></div>;\r\n        }\r\n        \r\n        var floorDetails = [];\r\n        for (var i = this.state.floors - 1; i >= 0; i--) {\r\n            var elevatorCall = \"free\";\r\n            if (this.state.floorStatus[i] === \"waiting\" || this.state.floorStatus[i] === \"arrived\") {\r\n                elevatorCall = \"Occupied\";\r\n            }\r\n            let floor = i;\r\n            floorDetails.push(\r\n                <div className={`floorSection floorBlock_${i}`}>\r\n                    <div className=\"floorNum\">{floor}</div>\r\n                    <Elevators floor={i} elevatorsPlace={this.state.elevatorsPlaces} />\r\n                    <div className={`elevatorCall ${elevatorCall}`} name=\"elevatorCall\" onClick={(e) => this.callElevator(e, floor)}>{this.state.floorStatus[i]}</div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"floorsWrapper\">\r\n                {floorDetails}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Floors;"]},"metadata":{},"sourceType":"module"}