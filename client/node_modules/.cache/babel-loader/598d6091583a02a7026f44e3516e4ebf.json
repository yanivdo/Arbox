{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\client\\\\src\\\\components\\\\Floors.js\";\nimport React from \"react\";\nimport Elevators from \"./Elevators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Floors extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callElevator = (e, floor) => {\n      fetch(\"http://localhost/Building/elevatorCallApi\", {\n        method: \"POST\",\n        withCredentials: true,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          floor: floor\n        })\n      }).then(response => response.json()).then(result => {\n        let arrayCopyStatus = this.state.floorStatus.slice();\n        arrayCopyStatus[floor] = \"Waiting\";\n        this.updateElevatorQueue(result.elevator, floor);\n        console.log(\"here2\");\n        this.setState({\n          floorStatus: arrayCopyStatus\n        });\n      });\n    };\n\n    this.getIndex = (value, arr) => {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === value) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    this.updateElevatorQueue = (elevator, floor, fromChange = this.state.elevatorsPlaces[elevator], reset = 0) => {\n      let elevatorArray = this.state.elevatorMoving.elevator.slice();\n      let fromArray = this.state.elevatorMoving.from.slice();\n      let toArray = this.state.elevatorMoving.to.slice();\n      var elevatorInQueue = this.getIndex(elevator, elevatorArray);\n\n      if (reset) {\n        elevatorArray.splice(elevatorInQueue, 1);\n        fromArray.splice(elevatorInQueue, 1);\n        toArray.splice(elevatorInQueue, 1);\n        let arrayCopyStatus = this.state.floorStatus.slice();\n        console.log(\"here3\");\n        arrayCopyStatus[floor] = \"Arrived\";\n        this.setState({\n          floorStatus: arrayCopyStatus\n        });\n        this.audio.play();\n        arrayCopyStatus[floor] = \"Call\";\n        setTimeout(() => {\n          console.log(\"here4\");\n          this.setState({\n            floorStatus: arrayCopyStatus\n          });\n        }, 2000);\n        this.updateElevatorStatus(elevator);\n      } else {\n        if (elevatorInQueue === -1) {\n          elevatorArray.push(elevator);\n          fromArray.push(fromChange);\n          toArray.push(floor);\n        } else {\n          elevatorArray[elevatorInQueue] = elevator;\n          fromArray[elevatorInQueue] = fromChange;\n          toArray[elevatorInQueue] = floor;\n        }\n      }\n\n      let elevatorMovingObj = {\n        elevator: elevatorArray,\n        from: fromArray,\n        to: toArray\n      };\n      this.setState({\n        elevatorMoving: elevatorMovingObj\n      });\n    };\n\n    this.startElevatorMove = () => {\n      for (let i = 0; i < this.state.elevatorMoving.elevator.length; i++) {\n        var elevator = this.state.elevatorMoving.elevator[i];\n        var start = this.state.elevatorMoving.from[i];\n        var end = this.state.elevatorMoving.to[i];\n\n        if (start === end) {\n          this.updateElevatorQueue(elevator, end, start, 1);\n        } else {\n          if (start < end) {\n            this.moveElevatorUp(elevator, start, end);\n          } else {\n            this.moveElevatorDown(elevator, start, end);\n          }\n        }\n      }\n    };\n\n    this.moveElevatorUp = (elevator, start, end) => {\n      let arrayCopy = this.state.elevatorsPlaces.slice();\n      let nextFloor = start + 1;\n      arrayCopy[elevator] = nextFloor;\n      this.moveElevatorBySpeed(arrayCopy);\n      this.updateElevatorQueue(elevator, end, nextFloor);\n    };\n\n    this.moveElevatorDown = (elevator, start, end) => {\n      let arrayCopy = this.state.elevatorsPlaces.slice();\n      let nextFloor = start - 1;\n      arrayCopy[elevator] = nextFloor;\n      this.moveElevatorBySpeed(arrayCopy);\n      this.updateElevatorQueue(elevator, end, nextFloor);\n    };\n\n    this.moveElevatorBySpeed = arrayCopy => {\n      this.setState({\n        elevatorsPlaces: arrayCopy\n      });\n    };\n\n    this.updateElevatorStatus = elevator => {\n      fetch(\"http://localhost/Building/updateElevatorStatus\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          elevatorNum: elevator\n        })\n      }).then(response => response.json()).then(result => {});\n    };\n\n    this.componentDidMount = () => {\n      setInterval(() => {\n        if (this.state.elevatorMoving.elevator) {\n          this.startElevatorMove();\n        }\n      }, 1000);\n      this.checkElevatorPlace();\n      var copyArray = [];\n\n      for (let i = 0; i < this.state.floors; i++) {\n        copyArray[i] = \"Call\";\n      }\n\n      consoe.log(\"here1\");\n      this.setState({\n        floorStatus: copyArray\n      });\n    };\n\n    this.checkElevatorPlace = () => {\n      fetch(\"http://localhost/Building/elevatorsPlaces\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({})\n      }).then(response => response.json()).then(result => {\n        this.setState({\n          elevatorsPlaces: result,\n          page: 1\n        });\n      });\n    };\n\n    this.state = {\n      page: 0,\n      floors: 10,\n      intervalId: 0,\n      floorStatus: [],\n      elevatorsPlaces: [],\n      movment: 0,\n      elevatorMoving: {\n        elevator: [],\n        from: [],\n        to: [],\n        distance: []\n      }\n    };\n    this.url = \"http://localhost/client/public/ding.mp3\";\n    this.audio = new Audio(this.url);\n  }\n\n  render() {\n    if (!this.state.page) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 20\n      }, this);\n    }\n\n    var floorDetails = [];\n\n    for (var i = this.state.floors - 1; i >= 0; i--) {\n      var elevatorCall = \"free\";\n\n      if (this.state.floorStatus[i] === \"Waiting\" || this.state.floorStatus[i] === \"Arrived\") {\n        elevatorCall = \"Occupied\";\n      }\n\n      let floor = i;\n      floorDetails.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `floorSection floorBlock_${i}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"floorNum\",\n          children: floor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Elevators, {\n          floor: i,\n          elevatorsPlace: this.state.elevatorsPlaces\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `elevatorCall ${elevatorCall}`,\n          name: \"elevatorCall\",\n          onClick: e => this.callElevator(e, floor),\n          children: this.state.floorStatus[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"floorsWrapper\",\n      children: floorDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Floors;","map":{"version":3,"sources":["D:/xampp/htdocs/client/src/components/Floors.js"],"names":["React","Elevators","Floors","Component","constructor","props","callElevator","e","floor","fetch","method","withCredentials","headers","Accept","credentials","body","JSON","stringify","then","response","json","result","arrayCopyStatus","state","floorStatus","slice","updateElevatorQueue","elevator","console","log","setState","getIndex","value","arr","i","length","fromChange","elevatorsPlaces","reset","elevatorArray","elevatorMoving","fromArray","from","toArray","to","elevatorInQueue","splice","audio","play","setTimeout","updateElevatorStatus","push","elevatorMovingObj","startElevatorMove","start","end","moveElevatorUp","moveElevatorDown","arrayCopy","nextFloor","moveElevatorBySpeed","elevatorNum","componentDidMount","setInterval","checkElevatorPlace","copyArray","floors","consoe","page","intervalId","movment","distance","url","Audio","render","floorDetails","elevatorCall"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Elevators from \"./Elevators\";\r\nclass Floors extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            floors: 10,\r\n            intervalId: 0,\r\n            floorStatus: [],\r\n            elevatorsPlaces: [],\r\n            movment: 0,\r\n            elevatorMoving: {\r\n                elevator: [],\r\n                from: [],\r\n                to: [],\r\n                distance: []\r\n            }\r\n        };\r\n        this.url = \"http://localhost/client/public/ding.mp3\";\r\n        this.audio = new Audio(this.url);\r\n    }\r\n\r\n    callElevator = (e, floor) => {\r\n        fetch(\"http://localhost/Building/elevatorCallApi\", {\r\n            method: \"POST\",\r\n            withCredentials: true,\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            credentials: \"include\",\r\n            body: JSON.stringify({\r\n                floor: floor\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                let arrayCopyStatus = this.state.floorStatus.slice();\r\n                arrayCopyStatus[floor] = \"Waiting\";\r\n                this.updateElevatorQueue(result.elevator, floor);\r\n                console.log(\"here2\");\r\n                this.setState({\r\n                    floorStatus: arrayCopyStatus,\r\n                });\r\n            });\r\n    }\r\n    getIndex = (value, arr) => {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i] === value) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    updateElevatorQueue = (elevator, floor, fromChange = this.state.elevatorsPlaces[elevator], reset = 0) => {\r\n        let elevatorArray = this.state.elevatorMoving.elevator.slice();\r\n        let fromArray = this.state.elevatorMoving.from.slice();\r\n        let toArray = this.state.elevatorMoving.to.slice();\r\n        var elevatorInQueue = this.getIndex(elevator, elevatorArray);\r\n        if (reset) {\r\n            elevatorArray.splice(elevatorInQueue, 1);\r\n            fromArray.splice(elevatorInQueue, 1);\r\n            toArray.splice(elevatorInQueue, 1);\r\n\r\n            let arrayCopyStatus = this.state.floorStatus.slice();\r\n            console.log(\"here3\");\r\n            arrayCopyStatus[floor] = \"Arrived\";\r\n            this.setState({\r\n                floorStatus: arrayCopyStatus\r\n            });\r\n            this.audio.play();\r\n            arrayCopyStatus[floor] = \"Call\";\r\n            setTimeout(() => {\r\n                console.log(\"here4\");\r\n                    this.setState({\r\n                        floorStatus: arrayCopyStatus\r\n                    });\r\n                }, 2000);\r\n                this.updateElevatorStatus(elevator);\r\n        } else {\r\n            if (elevatorInQueue === -1) {\r\n                elevatorArray.push(elevator);\r\n                fromArray.push(fromChange);\r\n                toArray.push(floor);\r\n            } else {\r\n                elevatorArray[elevatorInQueue] = elevator;\r\n                fromArray[elevatorInQueue] = fromChange;\r\n                toArray[elevatorInQueue] = floor;\r\n            }\r\n        }\r\n        let elevatorMovingObj = {\r\n            elevator: elevatorArray,\r\n            from: fromArray,\r\n            to: toArray\r\n        }\r\n        this.setState({\r\n            elevatorMoving: elevatorMovingObj\r\n        });\r\n    }\r\n\r\n    startElevatorMove = () => {\r\n        for (let i = 0; i < this.state.elevatorMoving.elevator.length; i++) {\r\n            var elevator = this.state.elevatorMoving.elevator[i];\r\n            var start = this.state.elevatorMoving.from[i];\r\n            var end = this.state.elevatorMoving.to[i];\r\n            if (start === end) {\r\n                this.updateElevatorQueue(elevator, end, start, 1);\r\n            } else {\r\n                if (start < end) {\r\n                    this.moveElevatorUp(elevator, start, end);\r\n                } else {\r\n                    this.moveElevatorDown(elevator, start, end);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    moveElevatorUp = (elevator, start, end) => {\r\n        let arrayCopy = this.state.elevatorsPlaces.slice();\r\n        let nextFloor = start + 1;\r\n        arrayCopy[elevator] = nextFloor;\r\n        this.moveElevatorBySpeed(arrayCopy);\r\n        this.updateElevatorQueue(elevator, end, nextFloor);\r\n    }\r\n\r\n    moveElevatorDown = (elevator, start, end) => {\r\n        let arrayCopy = this.state.elevatorsPlaces.slice();\r\n        let nextFloor = start - 1;\r\n        arrayCopy[elevator] = nextFloor;\r\n        this.moveElevatorBySpeed(arrayCopy);\r\n        this.updateElevatorQueue(elevator, end, nextFloor);\r\n    }\r\n\r\n    moveElevatorBySpeed = (arrayCopy) => {\r\n        this.setState({\r\n            elevatorsPlaces: arrayCopy,\r\n        });\r\n    }\r\n\r\n    updateElevatorStatus = (elevator) => {\r\n        fetch(\"http://localhost/Building/updateElevatorStatus\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                elevatorNum: elevator\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n            });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        setInterval(() => {\r\n            if (this.state.elevatorMoving.elevator) {\r\n                this.startElevatorMove();\r\n            }\r\n        }, 1000);\r\n        this.checkElevatorPlace();\r\n        var copyArray = [];\r\n        for (let i = 0; i < this.state.floors; i++) {\r\n            copyArray[i] = \"Call\";\r\n        }\r\n\r\n        consoe.log(\"here1\");\r\n        this.setState({\r\n            floorStatus: copyArray,\r\n        });\r\n    };\r\n\r\n    checkElevatorPlace = () => {\r\n        fetch(\"http://localhost/Building/elevatorsPlaces\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                this.setState({\r\n                    elevatorsPlaces: result,\r\n                    page: 1\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.page) {\r\n            return <div className=\"Loading\"></div>;\r\n        }\r\n        var floorDetails = [];\r\n        for (var i = this.state.floors - 1; i >= 0; i--) {\r\n            var elevatorCall = \"free\";\r\n            if (this.state.floorStatus[i] === \"Waiting\" || this.state.floorStatus[i] === \"Arrived\") {\r\n                elevatorCall = \"Occupied\";\r\n            }\r\n            let floor = i;\r\n            floorDetails.push(\r\n                <div className={`floorSection floorBlock_${i}`}>\r\n                    <div className=\"floorNum\">{floor}</div>\r\n                    <Elevators floor={i} elevatorsPlace={this.state.elevatorsPlaces} />\r\n                    <div className={`elevatorCall ${elevatorCall}`} name=\"elevatorCall\" onClick={(e) => this.callElevator(e, floor)}>{this.state.floorStatus[i]}</div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"floorsWrapper\">\r\n                {floorDetails}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Floors;"]},"metadata":{},"sourceType":"module"}