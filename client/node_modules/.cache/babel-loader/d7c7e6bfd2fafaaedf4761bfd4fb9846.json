{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\client\\\\src\\\\components\\\\Floors.js\";\nimport React from \"react\";\nimport Elevators from \"./Elevators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Floors extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callElevator = (e, floor) => {\n      fetch(\"http://localhost/Building/elevatorCallApi\", {\n        method: \"POST\",\n        withCredentials: true,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          floor: floor\n        })\n      }).then(response => response.json()).then(result => {\n        let arrayCopyStatus = this.state.floorStatus.slice();\n        arrayCopyStatus[floor] = \"waiting\";\n        console.log(\"here1\");\n        this.updateElevatorQueue(result.elevator, floor);\n        this.setState({\n          floorStatus: arrayCopyStatus\n        }); //this.startElevatorMove(result, floor);\n\n        setTimeout(() => {\n          this.updateElevatorStatus(result.elevator);\n          arrayCopyStatus[floor] = \"arrived\";\n          this.setState({\n            floorStatus: arrayCopyStatus\n          });\n          arrayCopyStatus[floor] = \"Call\";\n          setTimeout(() => {\n            this.setState({\n              floorStatus: arrayCopyStatus\n            });\n          }, 2000);\n        }, (result.distance + 1) * 1000);\n      });\n    };\n\n    this.updateElevatorQueue = (elevator, floor, fromChange = this.state.elevatorsPlaces[elevator], reset = 0) => {\n      let elevatorArray = this.state.elevatorMoving.elevator.slice();\n      let fromArray = this.state.elevatorMoving.from.slice();\n      let toArray = this.state.elevatorMoving.to.slice();\n      console.log(\"here4\");\n\n      if (reset) {\n        elevatorArray.splice(elevator, 1);\n        fromArray.splice(elevator, 1);\n        toArray.splice(elevator, 1);\n      } else {\n        elevatorArray[elevator] = elevator;\n        fromArray[elevator] = fromChange;\n        toArray[elevator] = floor;\n      }\n\n      let elevatorMovingObj = {\n        elevator: elevatorArray,\n        from: fromArray,\n        to: toArray\n      };\n      console.log(elevatorMovingObj);\n      this.setState({\n        elevatorMoving: elevatorMovingObj\n      });\n    };\n\n    this.startElevatorMove = () => {\n      for (let i = 0; i < this.state.elevatorMoving.elevator.length; i++) {\n        var elevator = this.state.elevatorMoving.elevator[i];\n        var start = this.state.elevatorMoving.from[i];\n        var end = this.state.elevatorMoving.to[i];\n        console.log(\"here3\");\n\n        if (start === end) {\n          console.log(\"here7\");\n          this.updateElevatorQueue(elevator, end, start, 1);\n        } else {\n          this.moveElevatorUp(elevator, start, end);\n        } //console.log(this.state.elevatorMoving);\n\n      } // if (start < end) {\n      //     this.moveElevatorUp(elevator, start, end);\n      // } else {\n      //     this.moveElevatorDown(elevator, start, end);\n      // }\n\n    };\n\n    this.moveElevatorUp = (elevator, start, end) => {\n      var count = 0;\n\n      for (var i = start; i <= end; i++) {\n        let arrayCopy = this.state.elevatorsPlaces.slice();\n        arrayCopy[elevator] = i;\n        setTimeout(() => {\n          this.moveElevatorBySpeed(arrayCopy);\n        }, count * 1000);\n        console.log(\"here6\");\n        this.updateElevatorQueue(elevator, end, i);\n        count++;\n      }\n    };\n\n    this.moveElevatorDown = (result, start, end) => {\n      var count = 0;\n\n      for (var i = start; i >= end;) {\n        let arrayCopy = this.state.elevatorsPlaces.slice();\n        arrayCopy[result.elevator] = i;\n        setTimeout(() => {\n          this.moveElevatorBySpeed(arrayCopy);\n        }, count * 1000);\n        count++;\n        i--;\n      }\n    };\n\n    this.moveElevatorBySpeed = arrayCopy => {\n      this.setState({\n        elevatorsPlaces: arrayCopy\n      });\n    };\n\n    this.updateElevatorStatus = elevator => {\n      fetch(\"http://localhost/Building/updateElevatorStatus\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          elevatorNum: elevator\n        })\n      }).then(response => response.json()).then(result => {});\n    };\n\n    this.componentDidMount = () => {\n      this.checkElevatorPlace();\n      var copyArray = [];\n\n      for (let i = 0; i < this.state.floors; i++) {\n        copyArray[i] = \"Call\";\n      }\n\n      this.setState({\n        floorStatus: copyArray\n      });\n    };\n\n    this.checkElevatorPlace = () => {\n      fetch(\"http://localhost/Building/elevatorsPlaces\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({})\n      }).then(response => response.json()).then(result => {\n        this.setState({\n          elevatorsPlaces: result,\n          page: 1\n        });\n      });\n    };\n\n    this.state = {\n      page: 0,\n      floors: 10,\n      floorStatus: [],\n      elevatorsPlaces: [],\n      movment: 0,\n      elevatorMoving: {\n        elevator: [],\n        from: [],\n        to: []\n      }\n    };\n  }\n\n  render() {\n    if (!this.state.page) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (this.state.elevatorMoving.elevator.length > 0) {\n      setInterval(() => {\n        console.log(\"here2\");\n        this.startElevatorMove();\n      }, 1000);\n    }\n\n    var floorDetails = [];\n\n    for (var i = this.state.floors - 1; i >= 0; i--) {\n      var elevatorCall = \"free\";\n\n      if (this.state.floorStatus[i] === \"waiting\" || this.state.floorStatus[i] === \"arrived\") {\n        elevatorCall = \"Occupied\";\n      }\n\n      let floor = i;\n      floorDetails.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `floorSection floorBlock_${i}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"floorNum\",\n          children: floor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Elevators, {\n          floor: i,\n          elevatorsPlace: this.state.elevatorsPlaces\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `elevatorCall ${elevatorCall}`,\n          name: \"elevatorCall\",\n          onClick: e => this.callElevator(e, floor),\n          children: this.state.floorStatus[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"floorsWrapper\",\n      children: floorDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Floors;","map":{"version":3,"sources":["D:/xampp/htdocs/client/src/components/Floors.js"],"names":["React","Elevators","Floors","Component","constructor","props","callElevator","e","floor","fetch","method","withCredentials","headers","Accept","credentials","body","JSON","stringify","then","response","json","result","arrayCopyStatus","state","floorStatus","slice","console","log","updateElevatorQueue","elevator","setState","setTimeout","updateElevatorStatus","distance","fromChange","elevatorsPlaces","reset","elevatorArray","elevatorMoving","fromArray","from","toArray","to","splice","elevatorMovingObj","startElevatorMove","i","length","start","end","moveElevatorUp","count","arrayCopy","moveElevatorBySpeed","moveElevatorDown","elevatorNum","componentDidMount","checkElevatorPlace","copyArray","floors","page","movment","render","setInterval","floorDetails","elevatorCall","push"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Elevators from \"./Elevators\";\r\nclass Floors extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            floors: 10,\r\n            floorStatus: [],\r\n            elevatorsPlaces: [],\r\n            movment: 0,\r\n            elevatorMoving: {\r\n                elevator: [],\r\n                from: [],\r\n                to: []\r\n            }\r\n        };\r\n    }\r\n\r\n    callElevator = (e, floor) => {\r\n        fetch(\"http://localhost/Building/elevatorCallApi\", {\r\n            method: \"POST\",\r\n            withCredentials: true,\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            credentials: \"include\",\r\n            body: JSON.stringify({\r\n                floor: floor\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                let arrayCopyStatus = this.state.floorStatus.slice();\r\n                arrayCopyStatus[floor] = \"waiting\";\r\n\r\n                console.log(\"here1\");\r\n                this.updateElevatorQueue(result.elevator, floor);\r\n                this.setState({\r\n                    floorStatus: arrayCopyStatus,\r\n                });\r\n                //this.startElevatorMove(result, floor);\r\n\r\n                setTimeout(\r\n                    () => {\r\n                        this.updateElevatorStatus(result.elevator);\r\n                        arrayCopyStatus[floor] = \"arrived\";\r\n                        this.setState({\r\n                            floorStatus: arrayCopyStatus\r\n                        });\r\n                        arrayCopyStatus[floor] = \"Call\";\r\n                        setTimeout(\r\n                            () => {\r\n                                this.setState({\r\n                                    floorStatus: arrayCopyStatus\r\n                                });\r\n                            }, 2000);\r\n                    }, (result.distance + 1) * 1000);\r\n            });\r\n    }\r\n\r\n    updateElevatorQueue = (elevator, floor, fromChange = this.state.elevatorsPlaces[elevator], reset = 0) => {\r\n        let elevatorArray = this.state.elevatorMoving.elevator.slice();\r\n        let fromArray = this.state.elevatorMoving.from.slice();\r\n        let toArray = this.state.elevatorMoving.to.slice();\r\n        console.log(\"here4\");\r\n        if (reset) {\r\n            elevatorArray.splice(elevator, 1);\r\n            fromArray.splice(elevator, 1);\r\n            toArray.splice(elevator, 1);\r\n        } else {\r\n            elevatorArray[elevator] = elevator;\r\n            fromArray[elevator] = fromChange;\r\n            toArray[elevator] = floor;\r\n        }\r\n        let elevatorMovingObj = {\r\n            elevator: elevatorArray,\r\n            from: fromArray,\r\n            to: toArray\r\n        }\r\n\r\n        console.log(elevatorMovingObj);\r\n        this.setState({\r\n            elevatorMoving: elevatorMovingObj\r\n        });\r\n    }\r\n\r\n    startElevatorMove = () => {\r\n        for (let i = 0; i < this.state.elevatorMoving.elevator.length; i++) {\r\n            var elevator = this.state.elevatorMoving.elevator[i];\r\n            var start = this.state.elevatorMoving.from[i];\r\n            var end = this.state.elevatorMoving.to[i];\r\n            console.log(\"here3\");\r\n            if (start === end) {\r\n                console.log(\"here7\");\r\n                this.updateElevatorQueue(elevator, end, start, 1);\r\n            } else {\r\n                this.moveElevatorUp(elevator, start, end);\r\n            }\r\n            //console.log(this.state.elevatorMoving);\r\n        }\r\n\r\n\r\n        // if (start < end) {\r\n        //     this.moveElevatorUp(elevator, start, end);\r\n        // } else {\r\n        //     this.moveElevatorDown(elevator, start, end);\r\n        // }\r\n    }\r\n\r\n    moveElevatorUp = (elevator, start, end) => {\r\n        var count = 0;\r\n        for (var i = start; i <= end; i++) {\r\n            let arrayCopy = this.state.elevatorsPlaces.slice();\r\n            arrayCopy[elevator] = i;\r\n            setTimeout(\r\n                () => {\r\n                    this.moveElevatorBySpeed(arrayCopy);\r\n                }, count * 1000);\r\n            console.log(\"here6\");\r\n            this.updateElevatorQueue(elevator, end, i);\r\n            count++;\r\n        }\r\n    }\r\n    moveElevatorDown = (result, start, end) => {\r\n        var count = 0;\r\n        for (var i = start; i >= end;) {\r\n            let arrayCopy = this.state.elevatorsPlaces.slice();\r\n            arrayCopy[result.elevator] = i;\r\n            setTimeout(\r\n                () => {\r\n                    this.moveElevatorBySpeed(arrayCopy);\r\n                }, count * 1000);\r\n            count++;\r\n            i--;\r\n        }\r\n    }\r\n\r\n    moveElevatorBySpeed = (arrayCopy) => {\r\n        this.setState({\r\n            elevatorsPlaces: arrayCopy,\r\n        });\r\n    }\r\n\r\n    updateElevatorStatus = (elevator) => {\r\n\r\n        fetch(\"http://localhost/Building/updateElevatorStatus\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                elevatorNum: elevator\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n            });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.checkElevatorPlace();\r\n        var copyArray = [];\r\n        for (let i = 0; i < this.state.floors; i++) {\r\n            copyArray[i] = \"Call\";\r\n        }\r\n        this.setState({\r\n            floorStatus: copyArray,\r\n        });\r\n    };\r\n\r\n    checkElevatorPlace = () => {\r\n        fetch(\"http://localhost/Building/elevatorsPlaces\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                this.setState({\r\n                    elevatorsPlaces: result,\r\n                    page: 1\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.page) {\r\n            return <div className=\"Loading\"></div>;\r\n        }\r\n        if (this.state.elevatorMoving.elevator.length > 0) {\r\n            setInterval(() => {\r\n                console.log(\"here2\");\r\n                this.startElevatorMove();\r\n            }, 1000);\r\n        }\r\n        var floorDetails = [];\r\n        for (var i = this.state.floors - 1; i >= 0; i--) {\r\n            var elevatorCall = \"free\";\r\n            if (this.state.floorStatus[i] === \"waiting\" || this.state.floorStatus[i] === \"arrived\") {\r\n                elevatorCall = \"Occupied\";\r\n            }\r\n            let floor = i;\r\n            floorDetails.push(\r\n                <div className={`floorSection floorBlock_${i}`}>\r\n                    <div className=\"floorNum\">{floor}</div>\r\n                    <Elevators floor={i} elevatorsPlace={this.state.elevatorsPlaces} />\r\n                    <div className={`elevatorCall ${elevatorCall}`} name=\"elevatorCall\" onClick={(e) => this.callElevator(e, floor)}>{this.state.floorStatus[i]}</div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"floorsWrapper\">\r\n                {floorDetails}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Floors;"]},"metadata":{},"sourceType":"module"}