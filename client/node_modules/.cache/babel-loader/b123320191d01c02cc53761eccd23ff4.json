{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\client\\\\src\\\\components\\\\Floors.js\";\nimport React from \"react\";\nimport Elevators from \"./Elevators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Floors extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callElevator = (e, floor) => {\n      fetch(\"http://localhost/Building/elevatorCallApi\", {\n        method: \"POST\",\n        withCredentials: true,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          floor: floor\n        })\n      }).then(response => response.json()).then(result => {\n        let arrayCopyStatus = this.state.floorStatus.slice();\n        arrayCopyStatus[floor] = \"Waiting\";\n        this.updateElevatorQueue(result.elevator, floor);\n        this.setState({\n          floorStatus: arrayCopyStatus\n        });\n        setTimeout(() => {\n          this.updateElevatorStatus(result.elevator);\n          arrayCopyStatus[floor] = \"Arrived\";\n          this.setState({\n            floorStatus: arrayCopyStatus\n          });\n          arrayCopyStatus[floor] = \"Call\";\n          setTimeout(() => {\n            this.setState({\n              floorStatus: arrayCopyStatus\n            });\n          }, 2000);\n        }, (result.distance + 1) * 1000);\n      });\n    };\n\n    this.getIndex = (value, arr) => {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === value) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    this.updateElevatorQueue = (elevator, floor, fromChange = this.state.elevatorsPlaces[elevator], reset = 0) => {\n      let elevatorArray = this.state.elevatorMoving.elevator.slice();\n      let fromArray = this.state.elevatorMoving.from.slice();\n      let toArray = this.state.elevatorMoving.to.slice();\n      var elevatorInQueue = this.getIndex(elevator, elevatorArray); //console.log(elevatorInQueue);\n\n      if (reset) {\n        elevatorArray.splice(elevator, 1);\n        fromArray.splice(elevator, 1);\n        toArray.splice(elevator, 1);\n      } else {\n        if (elevatorInQueue === -1) {\n          elevatorArray.push(elevator);\n          fromArray.push(fromChange);\n          toArray.push(floor);\n        } else {\n          elevatorArray[elevator] = elevator;\n          fromArray[elevator] = fromChange;\n          toArray[elevator] = floor;\n        }\n      }\n\n      console.log(fromArray); //console.log(elevatorArray[elevator] + \":\" + fromArray[elevator] + \":\" + toArray[elevator]);\n\n      let elevatorMovingObj = {\n        elevator: elevatorArray,\n        from: fromArray,\n        to: toArray\n      };\n      this.setState({\n        elevatorMoving: elevatorMovingObj\n      });\n    };\n\n    this.startElevatorMove = () => {\n      for (let i = 0; i < this.state.elevatorMoving.elevator.length; i++) {\n        var elevator = this.state.elevatorMoving.elevator[i];\n        var start = this.state.elevatorMoving.from[i];\n        var end = this.state.elevatorMoving.to[i]; //console.log(\"here3\");\n\n        if (start === end) {\n          this.updateElevatorQueue(elevator, end, start, 1);\n        } else {\n          if (start < end) {\n            this.moveElevatorUp(elevator, start, end);\n          } else {\n            this.moveElevatorDown(elevator, start, end); //console.log(elevator + \":\" + start + \":\" + end);\n          }\n        } //console.log(this.state.elevatorMoving);\n\n      } // if (start < end) {\n      //     this.moveElevatorUp(elevator, start, end);\n      // } else {\n      //     this.moveElevatorDown(elevator, start, end);\n      // }\n\n    };\n\n    this.moveElevatorUp = (elevator, start, end) => {\n      let arrayCopy = this.state.elevatorsPlaces.slice();\n      let nextFloor = start + 1;\n      arrayCopy[elevator] = nextFloor;\n      this.moveElevatorBySpeed(arrayCopy);\n      this.updateElevatorQueue(elevator, end, nextFloor); //console.log(\"here6\");\n      //console.log(count);\n    };\n\n    this.moveElevatorDown = (elevator, start, end) => {\n      let arrayCopy = this.state.elevatorsPlaces.slice();\n      let nextFloor = start - 1;\n      arrayCopy[elevator] = nextFloor; //console.log(arrayCopy);\n\n      this.moveElevatorBySpeed(arrayCopy);\n      this.updateElevatorQueue(elevator, end, nextFloor); //console.log(\"here6\");\n      //console.log(count);\n      //console.log(this.state.elevatorsPlaces);\n    };\n\n    this.moveElevatorBySpeed = arrayCopy => {\n      this.setState({\n        elevatorsPlaces: arrayCopy\n      });\n    };\n\n    this.updateElevatorStatus = elevator => {\n      fetch(\"http://localhost/Building/updateElevatorStatus\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          elevatorNum: elevator\n        })\n      }).then(response => response.json()).then(result => {});\n    };\n\n    this.componentDidMount = () => {\n      setInterval(() => {\n        if (this.state.elevatorMoving.elevator) {\n          this.startElevatorMove();\n        }\n      }, 1000); //this.setState({intervalId: intervalId});\n\n      this.checkElevatorPlace();\n      var copyArray = [];\n\n      for (let i = 0; i < this.state.floors; i++) {\n        copyArray[i] = \"Call\";\n      }\n\n      this.setState({\n        floorStatus: copyArray\n      });\n    };\n\n    this.checkElevatorPlace = () => {\n      fetch(\"http://localhost/Building/elevatorsPlaces\", {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({})\n      }).then(response => response.json()).then(result => {\n        this.setState({\n          elevatorsPlaces: result,\n          page: 1\n        });\n      });\n    };\n\n    this.state = {\n      page: 0,\n      floors: 10,\n      intervalId: 0,\n      floorStatus: [],\n      elevatorsPlaces: [],\n      movment: 0,\n      elevatorMoving: {\n        elevator: [],\n        from: [],\n        to: [],\n        distance: []\n      }\n    };\n  }\n\n  render() {\n    if (!this.state.page) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 20\n      }, this);\n    }\n\n    var floorDetails = [];\n\n    for (var i = this.state.floors - 1; i >= 0; i--) {\n      var elevatorCall = \"free\";\n\n      if (this.state.floorStatus[i] === \"Waiting\" || this.state.floorStatus[i] === \"Arrived\") {\n        elevatorCall = \"Occupied\";\n      }\n\n      let floor = i;\n      floorDetails.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `floorSection floorBlock_${i}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"floorNum\",\n          children: floor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Elevators, {\n          floor: i,\n          elevatorsPlace: this.state.elevatorsPlaces\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `elevatorCall ${elevatorCall}`,\n          name: \"elevatorCall\",\n          onClick: e => this.callElevator(e, floor),\n          children: this.state.floorStatus[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"floorsWrapper\",\n      children: floorDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Floors;","map":{"version":3,"sources":["D:/xampp/htdocs/client/src/components/Floors.js"],"names":["React","Elevators","Floors","Component","constructor","props","callElevator","e","floor","fetch","method","withCredentials","headers","Accept","credentials","body","JSON","stringify","then","response","json","result","arrayCopyStatus","state","floorStatus","slice","updateElevatorQueue","elevator","setState","setTimeout","updateElevatorStatus","distance","getIndex","value","arr","i","length","fromChange","elevatorsPlaces","reset","elevatorArray","elevatorMoving","fromArray","from","toArray","to","elevatorInQueue","splice","push","console","log","elevatorMovingObj","startElevatorMove","start","end","moveElevatorUp","moveElevatorDown","arrayCopy","nextFloor","moveElevatorBySpeed","elevatorNum","componentDidMount","setInterval","checkElevatorPlace","copyArray","floors","page","intervalId","movment","render","floorDetails","elevatorCall"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Elevators from \"./Elevators\";\r\nclass Floors extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            floors: 10,\r\n            intervalId: 0,\r\n            floorStatus: [],\r\n            elevatorsPlaces: [],\r\n            movment: 0,\r\n            elevatorMoving: {\r\n                elevator: [],\r\n                from: [],\r\n                to: [],\r\n                distance: []\r\n            }\r\n        };\r\n    }\r\n\r\n    callElevator = (e, floor) => {\r\n        fetch(\"http://localhost/Building/elevatorCallApi\", {\r\n            method: \"POST\",\r\n            withCredentials: true,\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            credentials: \"include\",\r\n            body: JSON.stringify({\r\n                floor: floor\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                let arrayCopyStatus = this.state.floorStatus.slice();\r\n                arrayCopyStatus[floor] = \"Waiting\";\r\n                this.updateElevatorQueue(result.elevator, floor);\r\n                this.setState({\r\n                    floorStatus: arrayCopyStatus,\r\n                });\r\n                setTimeout(\r\n                    () => {\r\n                        this.updateElevatorStatus(result.elevator);\r\n                        arrayCopyStatus[floor] = \"Arrived\";\r\n                        this.setState({\r\n                            floorStatus: arrayCopyStatus\r\n                        });\r\n                        arrayCopyStatus[floor] = \"Call\";\r\n                        setTimeout(\r\n                            () => {\r\n                                this.setState({\r\n                                    floorStatus: arrayCopyStatus\r\n                                });\r\n                            }, 2000);\r\n                    }, (result.distance + 1) * 1000);\r\n            });\r\n    }\r\n    getIndex = (value, arr) => {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i] === value) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    updateElevatorQueue = (elevator, floor, fromChange = this.state.elevatorsPlaces[elevator], reset = 0) => {\r\n        let elevatorArray = this.state.elevatorMoving.elevator.slice();\r\n        let fromArray = this.state.elevatorMoving.from.slice();\r\n        let toArray = this.state.elevatorMoving.to.slice();\r\n        var elevatorInQueue = this.getIndex(elevator, elevatorArray);\r\n\r\n        //console.log(elevatorInQueue);\r\n        if (reset) {\r\n            elevatorArray.splice(elevator, 1);\r\n            fromArray.splice(elevator, 1);\r\n            toArray.splice(elevator, 1);\r\n        } else {\r\n            if (elevatorInQueue === -1) {\r\n                elevatorArray.push(elevator);\r\n                fromArray.push(fromChange);\r\n                toArray.push(floor);\r\n            } else {\r\n                elevatorArray[elevator] = elevator;\r\n                fromArray[elevator] = fromChange;\r\n                toArray[elevator] = floor;\r\n            }\r\n        }\r\n\r\n        console.log(fromArray);\r\n        //console.log(elevatorArray[elevator] + \":\" + fromArray[elevator] + \":\" + toArray[elevator]);\r\n        let elevatorMovingObj = {\r\n            elevator: elevatorArray,\r\n            from: fromArray,\r\n            to: toArray\r\n        }\r\n        this.setState({\r\n            elevatorMoving: elevatorMovingObj\r\n        });\r\n    }\r\n\r\n    startElevatorMove = () => {\r\n        for (let i = 0; i < this.state.elevatorMoving.elevator.length; i++) {\r\n            var elevator = this.state.elevatorMoving.elevator[i];\r\n            var start = this.state.elevatorMoving.from[i];\r\n            var end = this.state.elevatorMoving.to[i];\r\n            //console.log(\"here3\");\r\n            if (start === end) {\r\n                this.updateElevatorQueue(elevator, end, start, 1);\r\n            } else {\r\n                if (start < end) {\r\n                    this.moveElevatorUp(elevator, start, end);\r\n                } else {\r\n                    this.moveElevatorDown(elevator, start, end);\r\n                    //console.log(elevator + \":\" + start + \":\" + end);\r\n                }\r\n            }\r\n            //console.log(this.state.elevatorMoving);\r\n        }\r\n\r\n\r\n        // if (start < end) {\r\n        //     this.moveElevatorUp(elevator, start, end);\r\n        // } else {\r\n        //     this.moveElevatorDown(elevator, start, end);\r\n        // }\r\n    }\r\n\r\n    moveElevatorUp = (elevator, start, end) => {\r\n        let arrayCopy = this.state.elevatorsPlaces.slice();\r\n        let nextFloor = start + 1;\r\n        arrayCopy[elevator] = nextFloor;\r\n        this.moveElevatorBySpeed(arrayCopy);\r\n        this.updateElevatorQueue(elevator, end, nextFloor);\r\n        //console.log(\"here6\");\r\n        //console.log(count);\r\n    }\r\n\r\n    moveElevatorDown = (elevator, start, end) => {\r\n        let arrayCopy = this.state.elevatorsPlaces.slice();\r\n        let nextFloor = start - 1;\r\n        arrayCopy[elevator] = nextFloor;\r\n        //console.log(arrayCopy);\r\n        this.moveElevatorBySpeed(arrayCopy);\r\n        this.updateElevatorQueue(elevator, end, nextFloor);\r\n        //console.log(\"here6\");\r\n        //console.log(count);\r\n\r\n        //console.log(this.state.elevatorsPlaces);\r\n    }\r\n\r\n    moveElevatorBySpeed = (arrayCopy) => {\r\n        this.setState({\r\n            elevatorsPlaces: arrayCopy,\r\n        });\r\n    }\r\n\r\n    updateElevatorStatus = (elevator) => {\r\n        fetch(\"http://localhost/Building/updateElevatorStatus\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                elevatorNum: elevator\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n            });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        setInterval(() => {\r\n            if (this.state.elevatorMoving.elevator) {\r\n                this.startElevatorMove();\r\n            }\r\n        }, 1000);\r\n        //this.setState({intervalId: intervalId});\r\n        this.checkElevatorPlace();\r\n        var copyArray = [];\r\n        for (let i = 0; i < this.state.floors; i++) {\r\n            copyArray[i] = \"Call\";\r\n        }\r\n        this.setState({\r\n            floorStatus: copyArray,\r\n        });\r\n    };\r\n\r\n    checkElevatorPlace = () => {\r\n        fetch(\"http://localhost/Building/elevatorsPlaces\", {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n            }),\r\n        }).then((response) => response.json())\r\n            .then((result) => {\r\n                this.setState({\r\n                    elevatorsPlaces: result,\r\n                    page: 1\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.page) {\r\n            return <div className=\"Loading\"></div>;\r\n        }\r\n        var floorDetails = [];\r\n        for (var i = this.state.floors - 1; i >= 0; i--) {\r\n            var elevatorCall = \"free\";\r\n            if (this.state.floorStatus[i] === \"Waiting\" || this.state.floorStatus[i] === \"Arrived\") {\r\n                elevatorCall = \"Occupied\";\r\n            }\r\n            let floor = i;\r\n            floorDetails.push(\r\n                <div className={`floorSection floorBlock_${i}`}>\r\n                    <div className=\"floorNum\">{floor}</div>\r\n                    <Elevators floor={i} elevatorsPlace={this.state.elevatorsPlaces} />\r\n                    <div className={`elevatorCall ${elevatorCall}`} name=\"elevatorCall\" onClick={(e) => this.callElevator(e, floor)}>{this.state.floorStatus[i]}</div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"floorsWrapper\">\r\n                {floorDetails}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Floors;"]},"metadata":{},"sourceType":"module"}